// Code generated by mockery v2.14.0. DO NOT EDIT.

package invoice

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, invoice
func (_m *MockRepository) Create(ctx context.Context, invoice Invoice) (Invoice, error) {
	ret := _m.Called(ctx, invoice)

	var r0 Invoice
	if rf, ok := ret.Get(0).(func(context.Context, Invoice) Invoice); ok {
		r0 = rf(ctx, invoice)
	} else {
		r0 = ret.Get(0).(Invoice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, Invoice) error); ok {
		r1 = rf(ctx, invoice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, ID
func (_m *MockRepository) Get(ctx context.Context, ID int) (Invoice, error) {
	ret := _m.Called(ctx, ID)

	var r0 Invoice
	if rf, ok := ret.Get(0).(func(context.Context, int) Invoice); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(Invoice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewMockRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
