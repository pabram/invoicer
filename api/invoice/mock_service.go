// Code generated by mockery v2.14.0. DO NOT EDIT.

package invoice

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, companyName, price
func (_m *MockService) Create(ctx context.Context, companyName string, price int) (Invoice, error) {
	ret := _m.Called(ctx, companyName, price)

	var r0 Invoice
	if rf, ok := ret.Get(0).(func(context.Context, string, int) Invoice); ok {
		r0 = rf(ctx, companyName, price)
	} else {
		r0 = ret.Get(0).(Invoice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, companyName, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockService) Get(ctx context.Context, id int) (Invoice, error) {
	ret := _m.Called(ctx, id)

	var r0 Invoice
	if rf, ok := ret.Get(0).(func(context.Context, int) Invoice); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(Invoice)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockService(t mockConstructorTestingTNewMockService) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
